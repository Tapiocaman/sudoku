package com.me.controller;

import java.util.HashMap;
import java.util.Map;

import com.me.battle_school.Bag;
import com.me.battle_school.BattleScreen;
import com.me.battle_school.Database;
import com.me.battle_school.Player;
import com.me.battle_school.Player.State;
import com.me.battle_school.World;

public class WorldController {

	enum Keys{ 
		LEFT, RIGHT, UP, DOWN, INTERACT
	}
	
	private World world; 
	private Player player;
	private Bag bag;
	
	static Map<Keys, Boolean> keys = new HashMap<WorldController.Keys, Boolean>(); 
	static {
		keys.put(Keys.LEFT, false); 
		keys.put(Keys.RIGHT, false); 
		keys.put(Keys.UP, false); 
		keys.put(Keys.DOWN, false); 
		keys.put(Keys.INTERACT, false); 
	};
	
	public WorldController(World world){
		this.world = world; 
		this.player = world.getPlayer();
		this.bag = world.getBag();
	}

	//** Key presses and touches ***//
	
	public void leftPressed(){
		keys.get(keys.put(Keys.LEFT, true)); 
	}
	
	public void rightPressed(){
		keys.get(keys.put(Keys.RIGHT, true)); 
	}
	
	public void upPressed(){
		keys.get(keys.put(Keys.UP, true));
	}
	
	public void downPressed(){
		keys.get(keys.put(Keys.DOWN, true)); 
	}
	
	public void interactPressed(){
		keys.get(keys.put(Keys.INTERACT, true)); 
	}
	
	public void leftReleased(){
		keys.get(keys.put(Keys.LEFT, false)); 
	}
	
	public void rightReleased(){
		keys.get(keys.put(Keys.RIGHT, false));
	}

	public void upReleased(){
		keys.get(keys.put(Keys.UP, false));
	}

	public void downReleased(){
		keys.get(keys.put(Keys.DOWN, false));
	}

	public void interactReleased(){
		keys.get(keys.put(Keys.INTERACT, false));
	}

	//*the main update method**//
	public void update(float delta){
		processInput();
		player.update(delta);
		bag.update(delta);
//		System.out.println(player.getPosition()); 
	}
	/*public boolean isPressed(){
		if(keys.put(Keys.DOWN,false)&&keys.put(Keys.RIGHT,false)&&keys.put(Keys.LEFT,false)&&keys.put(Keys.UP,false)){
			return false;
		}
		else return true;
	}*/
	
	//**change player's state and params based on input controls **//
	private void processInput(){
		float yStair = 4.7f; 
		float xStairL = 2.9f;
		float xStairH = 6.2f;
		float offset = 0f; 
		float xnpcL = 2.6f;
		float xnpcH = 2.7f;
		if(player.isFacingUp() && player.getPosition().y >= yStair && (player.getPosition().x > xnpcL && player.getPosition().x < xnpcH)) {
			game.setScreen(new BattleScreen(game, new Database()));
		}
		if(keys.get(Keys.LEFT)){
			//left is pressed
			System.out.println(player.getPosition().x + ", " + player.getPosition().y); 
			player.setFacingLeft(true);
			player.setFacingUp(false);
			player.setState(State.WALKING_X); 
			player.getVelocity().x = -Player.SPEED;
			player.getVelocity().y = 0;
//			if(player.getPosition().y > yStair && player.getPosition().x < xStairH && player.getPosition().x > xStairL) {
////				player.setPositionX(xStairH + offset); 
//				System.out.println("LEFT"); 
//			}
//			else 
			if(player.getPosition().x < 0){
				player.setPositionX(0); 
			}
		}
		if(keys.get(Keys.RIGHT)){
			//right is pressed
			System.out.println(player.getPosition().x + ", " + player.getPosition().y); 
			player.setFacingLeft(false); 
			player.setFacingUp(false);
			player.setState(State.WALKING_X); 
			player.getVelocity().x = Player.SPEED; 
			player.getVelocity().y = 0;
//			if(player.getPosition().y > yStair && player.getPosition().x > xStairL && player.getPosition().x < xStairH) {
////				player.setPositionX(xStairL-offset);
//				System.out.println("RIGHT"); 
//			}
//			else 
			if(player.getPosition().x > 9){
				player.setPositionX(9); 
			}
		}
		//**NEED TO IMPLEMENT Y DIRECTION**//
		if(keys.get(Keys.UP)){
			//up is pressed
//			System.out.println(player.getPosition().x + ", " + player.getPosition().y); 
			player.setFacingUp(true); 
			player.setFacingLeft(false);
			player.setState(State.WALKING_Y);
			player.getVelocity().y = Player.SPEED; 
			player.getVelocity().x = 0;	
//			System.out.println("inside up key"); 
//			if(player.getPosition().y > yStair && player.getPosition().x > xStairL && player.getPosition().x < xStairH) {
////				System.out.println("inside if"); 
//				player.setPositionY(yStair); 
//			}
//			else 
			if(player.getPosition().y > yStair){
				player.setPositionY(yStair); 
			}
		}
		if(keys.get(Keys.DOWN)){
//			System.out.println(player.getPosition().x + ", " + player.getPosition().y); 
			player.setFacingUp(false); 
			player.setFacingLeft(false);
			player.setState(State.WALKING_Y); 
			player.getVelocity().y = -Player.SPEED; 
			player.getVelocity().x = 0;
			if(player.getPosition().y < 0){
				player.setPositionY(0); 
			}
		}
		
		//need to check if both or none are pressed then player is idle
		if((keys.get(Keys.LEFT) && keys.get(Keys.RIGHT)) ||
				(keys.get(Keys.UP) && keys.get(Keys.DOWN)) || 
				(keys.get(Keys.LEFT) && keys.get(Keys.UP)) ||
				(keys.get(Keys.LEFT) && keys.get(Keys.DOWN)) ||
				(keys.get(Keys.UP) && keys.get(Keys.RIGHT)) ||
				(keys.get(Keys.DOWN) && keys.get(Keys.RIGHT)) ||
				(!keys.get(Keys.LEFT) && !keys.get(Keys.RIGHT) &&!keys.get(Keys.UP) && !keys.get(Keys.DOWN))){
			player.setState(State.IDLE); 
			player.getVelocity().x = 0; 
			player.getVelocity().y = 0; 
		}
		
	}
}
